import org.example.controler.KeyboardFactory;
import org.junit.Assert;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

import java.util.List;

import org.junit.jupiter.api.Assertions.*;

/**
 * —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
 */
class KeyBoardFactoryTest {

    private KeyboardFactory keyboardFactory;

    /**
     * –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä–∂—É–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
     */
    @BeforeEach
    void setUp() {
        keyboardFactory = new KeyboardFactory();
    }

    /**
     * —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
     */
    @Test
    void testCreateGameSelectionKeyboard() {

        InlineKeyboardMarkup keyboard = keyboardFactory.createGameSelectionKeyboard();


        Assert.assertNotNull(keyboard);
        Assert.assertNotNull(keyboard.getKeyboard());
        Assert.assertEquals(1, keyboard.getKeyboard().size());

        List<InlineKeyboardButton> firstRow = keyboard.getKeyboard().get(0);
        Assert.assertEquals(1, firstRow.size());

        InlineKeyboardButton button = firstRow.get(0);
        Assert.assertEquals("Ride the Bus", button.getText());
        Assert.assertEquals("ride_the_bus", button.getCallbackData());
    }

    /**
     * —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
     */
    @Test
    void testKeyboardFirstRound() {

        InlineKeyboardMarkup keyboard = keyboardFactory.keyboardFirstRound();


        Assert.assertNotNull(keyboard);
        Assert.assertNotNull(keyboard.getKeyboard());
        Assert.assertEquals(1, keyboard.getKeyboard().size());

        List<InlineKeyboardButton> firstRow = keyboard.getKeyboard().get(0);
        Assert.assertEquals(2, firstRow.size());


        InlineKeyboardButton firstButton = firstRow.get(0);
        Assert.assertEquals("–ö—Ä–∞—Å–Ω—ã–π", firstButton.getText());
        Assert.assertEquals("red", firstButton.getCallbackData());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É
        InlineKeyboardButton secondButton = firstRow.get(1);
        Assert.assertEquals("–ß–µ—Ä–Ω—ã–π", secondButton.getText());
        Assert.assertEquals("black", secondButton.getCallbackData());
    }

    /**
     * —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞—É–Ω–¥–∞
     */
    @Test
    void testCreateHigherLowerKeyboard() {

        InlineKeyboardMarkup keyboard = keyboardFactory.createHigherLowerKeyboard();


        Assert.assertNotNull(keyboard);
        Assert.assertNotNull(keyboard.getKeyboard());
        Assert.assertEquals(1, keyboard.getKeyboard().size());

        List<InlineKeyboardButton> firstRow = keyboard.getKeyboard().get(0);
        Assert.assertEquals(2, firstRow.size());

        InlineKeyboardButton firstButton = firstRow.get(0);
        Assert.assertEquals("üìà –í—ã—à–µ", firstButton.getText());
        Assert.assertEquals("higher", firstButton.getCallbackData());

        InlineKeyboardButton secondButton = firstRow.get(1);
        Assert.assertEquals("üìâ –ù–∏–∂–µ", secondButton.getText());
        Assert.assertEquals("lower", secondButton.getCallbackData());
    }

    /**
     * —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ —Ä–∞—É–Ω–¥–∞
     */
    @Test
    void testCreateRangeKeyboard() {

        InlineKeyboardMarkup keyboard = keyboardFactory.createRangeKeyboard();


        Assert.assertNotNull(keyboard);
        Assert.assertNotNull(keyboard.getKeyboard());
        Assert.assertEquals(1, keyboard.getKeyboard().size());

        List<InlineKeyboardButton> firstRow = keyboard.getKeyboard().get(0);
        Assert.assertEquals(2, firstRow.size());

        InlineKeyboardButton firstButton = firstRow.get(0);
        Assert.assertEquals("üì• –í–Ω—É—Ç—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞", firstButton.getText());
        Assert.assertEquals("inside", firstButton.getCallbackData());

        InlineKeyboardButton secondButton = firstRow.get(1);
        Assert.assertEquals("üì§ –í–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞", secondButton.getText());
        Assert.assertEquals("outside", secondButton.getCallbackData());
    }

    /**
     * —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ç–≤–µ—Ä—Ç–æ–π –∫–ª–∞–≤–∏—Ç—É—Ä—ã
     */
    @Test
    void testCreateSuitGuessKeyboard() {

        InlineKeyboardMarkup keyboard = keyboardFactory.createSuitGuessKeyboard();


        Assert.assertNotNull(keyboard);
        Assert.assertNotNull(keyboard.getKeyboard());
        Assert.assertEquals(2, keyboard.getKeyboard().size());


        List<InlineKeyboardButton> firstRow = keyboard.getKeyboard().get(0);
        Assert.assertEquals(2, firstRow.size());

        InlineKeyboardButton firstRowFirstButton = firstRow.get(0);
        Assert.assertEquals("‚ô• –ß–µ—Ä–≤–∏", firstRowFirstButton.getText());
        Assert.assertEquals("hearts", firstRowFirstButton.getCallbackData());

        InlineKeyboardButton firstRowSecondButton = firstRow.get(1);
        Assert.assertEquals("‚ô¶ –ë—É–±–Ω—ã", firstRowSecondButton.getText());
        Assert.assertEquals("diamonds", firstRowSecondButton.getCallbackData());


        List<InlineKeyboardButton> secondRow = keyboard.getKeyboard().get(1);
        Assert.assertEquals(2, secondRow.size());

        InlineKeyboardButton secondRowFirstButton = secondRow.get(0);
        Assert.assertEquals("‚ô£ –¢—Ä–µ—Ñ—ã", secondRowFirstButton.getText());
        Assert.assertEquals("clubs", secondRowFirstButton.getCallbackData());

        InlineKeyboardButton secondRowSecondButton = secondRow.get(1);
        Assert.assertEquals("‚ô† –ü–∏–∫–∏", secondRowSecondButton.getText());
        Assert.assertEquals("peaks", secondRowSecondButton.getCallbackData());
    }
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º –∫–Ω–æ–ø–æ–∫
     * –û–∂–∏–¥–∞–µ—Ç—Å—è —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ –±–µ–∑ —Å—Ç—Ä–æ–∫
     */
    @Test
    void testCreateKeyboard_WithEmptyButtonsArray() {
        String[][][] emptyButtons = {};

        InlineKeyboardMarkup keyboard = keyboardFactory.createKeyboard(emptyButtons);

        Assert.assertNotNull(keyboard);
        Assert.assertNotNull(keyboard.getKeyboard());
        Assert.assertTrue(keyboard.getKeyboard().isEmpty());
    }
}