package org.example.controler;

import org.example.controler.cards.Card;
import org.example.controler.cards.Deck;



/**
 * –ö–ª–∞—Å—Å –†–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–≥—Ä—É –≤ Ride The Bus
 */
public class RideTheBus {
    private Deck deck;
    private String specialCard;
    private final KeyboardFactory keyboardFactory;
    private String chatId;
    private boolean isGameOver;
    private boolean isProcessing;

    public RideTheBus() {
        keyboardFactory = new KeyboardFactory();
        specialCard = "\uD83C\uDCCF";
        isGameOver = false;
        isProcessing = false;
        deck = new Deck(4);

    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
     */
    private boolean checkWin(String message, Card card) {
        switch (deck.roundNumber) {
            case 1:
                boolean isRed = card.getSuit().equals("‚ô•Ô∏è") || card.getSuit().equals("‚ô¶Ô∏è");
                boolean isBlack = card.getSuit().equals("‚ô†Ô∏è") || card.getSuit().equals("‚ô£Ô∏è");
                return (message.equals("red") && isRed) || (message.equals("black") && isBlack);
            case 2:
                int valeCard1 = deck.table[0].getValue();
                int valueCurrent = card.getValue();
                return ((valueCurrent >= valeCard1 && message.equals("higher")) || (valueCurrent <= valeCard1 && message.equals("lower")));
            case 3:
                int valueCard1 = deck.table[0].getValue();
                int valueCard2 = deck.table[1].getValue();
                int currentValue = card.getValue();
                int min = Math.min(valueCard1, valueCard2);
                int max = Math.max(valueCard1, valueCard2);

                if (currentValue >= min && currentValue <= max) {
                    if (message.equals("inside")) {
                        return true;
                    }
                }
                return (message.equals("outside") && (currentValue < min | currentValue > max));
            case 4:
                String cardSuit = card.getSuit();

                return ((cardSuit.equals("‚ô•Ô∏è") && message.equals("hearts")) ||
                        (cardSuit.equals("‚ô¶Ô∏è") && message.equals("diamonds")) ||
                        (cardSuit.equals("‚ô†Ô∏è") && message.equals("peacks")) ||
                        (cardSuit.equals("‚ô£Ô∏è") && message.equals("clubs")));
        }
        return true;
    }
    /**
     * –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
     */
    public void startGame(String chatId, TelegramBot bot) {
        this.chatId = chatId;
        play(bot);
    }
    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     */
    private void resetGame() {
        deck.roundNumber = 1;
        deck = new Deck(4);
        deck.initializeDeck();

        isGameOver = false;
        isProcessing = false; // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }
    /**
     * –ì–µ—Ç—Ç–µ—Ä isGameOver
     */
    public boolean IsGameOver(){
        return isGameOver;
    }
    /**
     * –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
     */
    private void play(TelegramBot bot) {
        String roundText = "";
        switch (deck.roundNumber) {
            case 1:
                roundText = "–†–∞—É–Ω–¥ 1 \n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:";
                bot.keyboard = keyboardFactory.keyboardFirstRound();
                break;

            case 2:
                roundText = "–†–∞—É–Ω–¥ 2 \n–í—ã–±–µ—Ä–∏—Ç–µ –±—É–¥–µ—Ç –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ä—à–µ–π –∏–ª–∏ –º–ª–∞–¥—à–µ–π –º–∞—Å—Ç–∏:";
                bot.keyboard = keyboardFactory.createHigherLowerKeyboard();
                break;

            case 3:
                roundText = "–†–∞—É–Ω–¥ 3 \n–í—ã–±–µ—Ä–∏—Ç–µ –±—É–¥–µ—Ç –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –∏–ª–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:";
                bot.keyboard = keyboardFactory.createRangeKeyboard();
                break;

            case 4:
                roundText = "–†–∞—É–Ω–¥ 4 \n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –º–∞—Å—Ç–∏ –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞:";
                bot.keyboard = keyboardFactory.createSuitGuessKeyboard();
                break;

            case 5:
                // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                handleGameOver(bot, true);
                return;
        }

        if (bot.keyboard != null) {
            bot.sendMessage(roundText + "\n" + deck.getTableAsString() + " " + specialCard, chatId, bot.keyboard);
        }
    }
    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void processUserChoice(String callbackData, TelegramBot bot) {
        if (isGameOver) {
            return;
        }

        Card card = deck.dealCard();
        deck.addToTable(card);
        boolean isWin = checkWin(callbackData, card);

        if (isWin) {
            bot.sendMessage(deck.getTableAsString() + "\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!",chatId,null);

            if (deck.roundNumber == 4) {
                handleGameOver(bot, true);
            } else {
                deck.roundNumber=deck.roundNumber+1;
                play(bot);
            }
        } else {
            handleGameOver(bot, false);
        }

    }
    /**
     *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
     */
    private void handleGameOver(TelegramBot bot, boolean isWinner) {
        if (isWinner) {
            bot.sendMessage(deck.getTableAsString() + "\n–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ä–∞—É–Ω–¥—ã! üéâ\n–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É?",
                    chatId,
                    keyboardFactory.createGameSelectionKeyboard());
        } else {
            bot.sendMessage(deck.getTableAsString() + "\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞?",
                    chatId,
                    keyboardFactory.createGameSelectionKeyboard());
        }
        resetGame();
    }
}